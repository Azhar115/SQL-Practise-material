use SchoolDatabase

--1) 
CREATE TABLE TABLE1(
	A CHAR(2) NULL,
	B CHAR(2)  NULL
)

CREATE TABLE TABLE2(
	A CHAR(2) NULL,
	B CHAR(2) NULL,
	C VARCHAR(2) NULL,
	D VARCHAR(2) NULL
)


INSERT INTO TABLE1
VALUES('X1','Y1'),
	  ('X2','Y2')

INSERT INTO TABLE2
VALUES('X2','Y2','Z2','W2'),
	  ('R2','S2','T2','U2')

-- IT GIVES THE ERROR ABOUT NOT CAMPATIBLE COLUMNS
SELECT *
FROM	TABLE1
UNION
SELECT *
FROM	TABLE2

-- AS THE COLUMNS CAMPATABILE AS WELL AS THE NUMBER OF COLUMNS ARE SAME THE QRY RUNS PROPERLY
SELECT *
FROM	TABLE1
UNION
SELECT A,B
FROM	TABLE2

-- SYNTAX IS OKAY, AS THE DATA TYPES OF COMPARING COLUMNS IN BOTH TABLES ARE SAME
-- BUT SEMANTICALY IT IS WRONG AS THE THE DATA OF A IN TABLE1 IS UNIONED WITH THE DATA OF B IN TABLE IN RESULT TABLE
SELECT *
FROM	TABLE1
UNION
SELECT  B,A
FROM	TABLE2

/*
UPDATE TABLE1
SET A='R1',B = 'S1'
WHERE A='X2' AND B='Y2'
*/
-- AS VARCHAR OF TABLE2 COLUMN C DATA TYPE AND CHAR DATA TYPE OF THE TABLE1 OF COLUMN B ARE FROM SAME DOMAIN CHARACTER, THEREFOR, THEY ARE ALLOWED TO UNION BUT THE SEMANTICALY WRONG
SELECT *
FROM	TABLE1
UNION
SELECT	A,C
FROM	TABLE2

--SAME AS ABOVE QRY COLUMN DATA TYPE COMPATIBILTY ALLOWED THE QRY TO BE EXECUTED
SELECT *
FROM	TABLE1
UNION 
SELECT A,D
FROM	TABLE2

CREATE VIEW VIEWX AS
SELECT  A,B
FROM	TABLE2

SELECT *
FROM	TABLE1
UNION
SELECT	*
FROM	VIEWX

/*
2) CREATE AND PRINT THE RESULT OF A QUERY THAT GENERATES  THE NAMES,CLASS,
COURSE NUMBERS OF THE STUDENTS WHO HAVE EARNED B'S IN COMPUTER SCIENCE COURSE.
STORE THIS QUERY AS as Q7 2. Then, revise Q7 2 to delete
from the result set those students who are sophomores (class = 2). Use
NOT .. IN to select those students who are sophomores
*/

--1ST PART) CREATING VIEW OF GRADE_REPORT TABLE AND THE STUDENT TABLE AS THEY CAN BE JOIN AS THEY HAVE STUDENT TABLE COMMON IN BOTH
 
CREATE VIEW STUDENT_GRADE_VIEW AS
--STUDENT NAME,AND CLASS RETRIEVE MENTION IN QRY, AND SECTION_ID COLUMN FOR JOINING WITH SECTION TABLE WHICH HELPS TO JOIN WITH COURSE TABLE TO COMPLETE QRY 
SELECT  S.SNAME AS 'STUDENT NAMES',S.CLASS,GR.SECTION_ID
FROM	Student S INNER JOIN Grade_report GR
ON		S.STNO = GR.STUDENT_NUMBER
WHERE	GR.GRADE = 'B'
AND		S.MAJOR = 'COSC'




SELECT *
FROM	 STUDENT_GRADE_VIEW

--2ND PART) CREATE NESTED VIEW OF SECTION AND  STUDENT_GRADE_VIEW TABLE
CREATE VIEW SECTION_STUDENT_GRADE_VIEW1_VIEW2 AS
SELECT	SGV.[STUDENT NAMES],SGV.CLASS,SE.COURSE_NUM
FROM	STUDENT_GRADE_VIEW SGV INNER JOIN Section SE
ON		SGV.SECTION_ID = SE.SECTION_ID

--3RD PART) JOIN COURSE WITH ABOVE PART TWO VIEW TO RETRIEVE ANSWER
CREATE VIEW VIEW_COSC AS
SELECT  SSGV.[STUDENT NAMES],SSGV.COURSE_NUM,SSGV.CLASS
FROM	Course C INNER JOIN SECTION_STUDENT_GRADE_VIEW1_VIEW2 SSGV
ON		C.COURSE_NUMBER = SSGV.COURSE_NUM
AND		C.COURSE_NUMBER  LIKE 'COSC%'

--NOW DELTE THE CLASS='2'IN THE ABOVE QUERY BY NOT IN 
SELECT *
FROM	VIEW_COSC
WHERE CLASS NOT IN ('2')  --VIEW_COSC - ('2')

/*--Q7_3) Find the names, grades, andcourse numbers of students who have
earnedA’s in computer science or math courses. Join the Section and
Grade report tables (be careful to not create the Cartesian product).
Then, UNION the set of “course numbers COSC% andA” with the
set of “course numbers MATH% andA.” 
*/
--1ST PART) TO FIND INFORMATION STUDENT WHOSE GRADE IS 'A' 
CREATE VIEW STUDENT_GRADE_A_VIEW AS
SELECT	S.SNAME AS 'STUDENT NAMES',GR.GRADE,GR.SECTION_ID
FROM	Student S JOIN Grade_report GR
ON		S.STNO = GR.STUDENT_NUMBER
WHERE	GR.GRADE = 'A'

--2ND PART) TO FIND THE COURSE NUMBER OF COMPUTER SCIENCE AND MATH COURSE
CREATE VIEW GRADE_SECTION_COURSE_COS_A_VIEW AS
SELECT	GV.[STUDENT NAMES],GV.GRADE,C.COURSE_NUMBER
FROM	STUDENT_GRADE_A_VIEW AS GV  
		JOIN (Section SE INNER JOIN COURSE C
			  ON	C.COURSE_NUMBER = SE.COURSE_NUM
			  )
ON		GV.SECTION_ID = SE.SECTION_ID
WHERE	C.COURSE_NUMBER LIKE  'COSC%' 

CREATE VIEW GRADE_SECTION_COURSE_MATH_A_VIEW AS
SELECT	GV.[STUDENT NAMES],GV.GRADE,C.COURSE_NUMBER
FROM	STUDENT_GRADE_A_VIEW AS GV  
		JOIN (Section SE INNER JOIN COURSE C
			  ON	C.COURSE_NUMBER = SE.COURSE_NUM
			  )
ON		GV.SECTION_ID = SE.SECTION_ID
WHERE	C.COURSE_NUMBER LIKE  'MATH%' 

--JOINING BOTH  ABOVE VIEW QUERIES TO GET COMPLETE RESULT
SELECT *
FROM	GRADE_SECTION_COURSE_COS_A_VIEW
UNION
SELECT *
FROM	GRADE_SECTION_COURSE_MATH_A_VIEW
/*
--4)  Findthe names andmajors of students who have made a C in any
course. Make the “who have made a C in any course” a subquery for
which you use IN.
*/
--METHODE 1) 

SELECT  S.SNAME AS 'STUDENT NAMES', S.MAJOR
FROM	Student S 
WHERE   S.STNO  IN 
		( SELECT  GR.STUDENT_NUMBER
		  FROM	  Grade_report GR 
		  WHERE	  GR.SECTION_ID IN
		( SELECT  SE.SECTION_ID
		  FROM	  SECTION SE  
		  WHERE	  SE.COURSE_NUM IN
		( SELECT  C.COURSE_NUMBER 
		  FROM	  COURSE C
		 ))
		 AND	GR.GRADE = 'C')

--METHOE 2) 
SELECT  S.SNAME AS [STUDENT NAME], S.MAJOR
FROM	Student S
WHERE	S.STNO IN (
		SELECT  GR.STUDENT_NUMBER
		FROM	Grade_report GR INNER JOIN
		(Section SE JOIN Course C
		 ON SE.COURSE_NUM = C.COURSE_NUMBER
		)
		ON SE.SECTION_ID = GR.SECTION_ID
		WHERE	GR.GRADE = 'C'
		)

--Q7-5A) Write a query that gives the student number, name, course, and grade for each set.
CREATE VIEW SET_A AS
SELECT  S.STNO AS [STUDENT NUMBER],S.SNAME AS [STUDENT NAME],GR.GRADE, C.COURSE_NAME
FROM	Student S 
JOIN    (Grade_report GR  
		JOIN  ( SECTION SE 
			   JOIN COURSE C
			   ON	SE.COURSE_NUM = C.COURSE_NUMBER)
	    ON	GR.SECTION_ID = SE.SECTION_ID)
ON	GR.STUDENT_NUMBER = S.STNO
WHERE	GR.GRADE IN ('A','B')
AND		C.COURSE_NUMBER LIKE 'COSC%'

CREATE VIEW SET_B AS
SELECT  S.STNO AS [STUDENT NUMBER],S.SNAME AS [STUDENT NAME],GR.GRADE, C.COURSE_NAME
FROM	Student S 
JOIN    (Grade_report GR  
		JOIN  ( SECTION SE 
			   JOIN COURSE C
			   ON	SE.COURSE_NUM = C.COURSE_NUMBER)
	    ON	GR.SECTION_ID = SE.SECTION_ID)
ON	GR.STUDENT_NUMBER = S.STNO
WHERE C.COURSE_NUMBER LIKE 'MATH%'

-- STUDENT NAMES WHO ARE NOT IN SET_B
--SET_A - SET_B (DIFFERENCE)
SELECT *
FROM	SET_A
WHERE  [STUDENT NUMBER] NOT IN (
		SELECT  [STUDENT NUMBER]
		FROM	SET_B)

--STUDENT NAMES WHO ARE NOT IN SET_A
--SET_B - SET_A 
SELECT *
FROM	SET_B
WHERE [STUDENT NUMBER] NOT IN (
	   SELECT [STUDENT NUMBER]
	   FROM	   SET_A)

/*
--Q7_6)Create two tables, T1 and T2, that contain a name anda salary column. In the first table, order the columns by name and then by salary.
In the secondtable, order the columns by salary andthen by name.
Use the same data types for each—VARCHAR(20) and NUMBER, for
example. Populate the tables with two rows each.
*/
CREATE TABLE TA1(
NAME VARCHAR(20) NULL,
SALARY NUMERIC   NULL)

CREATE TABLE TA2(
SALARY NUMERIC  NULL,
NAME   VARCHAR(20) NULL)

INSERT INTO TA1
VALUES ('ALI',20.45),
		('AHMED',45.00)
INSERT INTO TA2 
VALUES (13.00,'IFTEKHAR'),
		(15.00,'ZAIN')

--Q7-7) CAN YOU UNION THE ABOVE TA1,TA2 TABLE
-- IT WILL DISPLAY TYPE CONVERSION ERROR VARCHAR INTO NUMERIC
SELECT *
FROM	TA1
UNION
SELECT *
FROM	TA2
--SOLUTION
SELECT *
FROM	TA1
UNION
SELECT NAME,SALARY
FROM	TA2

DROP TABLE TA1,TA2

--Q7-8)









