
Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	TABLE	     :	TOTAL NUMBER OF RECORDS
--------------------------------------------------------
i. Attribute table   =       10000 
ii. Business table   =	     10000
iii. Category table  =	     10000
iv. Checkin table    =	     10000
v. elite_years table =	     10000
vi. friend table     = 	     10000
vii. hours table     =	     10000 
viii. photo table    = 	     10000
ix. review table     = 	     10000
x. tip table         =       10000
xi. user table       =       10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.
	TABLE            :  ATRIBUTE IS PRIMARY(P) OR FOREIGN KEY(F)      :  NAME OF ATTRIBUTE    :  TOTAL DISTINCT RECORDS 
--------------------------------------------------------------------------------------------------------------------------------
i. Business 	=		PRIMARY KEY                               :    id                 :      10000                   
ii. Hours	=               FORIEGN KEY                               : bussiness_id          :      1562
iii. Category   = 		FORIEGN KEY                               : bussiness_id          :      2643 
iv. Attribute   =		FORIEGN KEY                               : bussiness_id          :      1115
v. Review       =		FORIEGN KEY                               : bussiness_id          :      8090 
vi. Checkin     = 		FORIEGN KEY                               : bussiness_id          :      493 
vii. Photo      =		FORIEGN KEY                               : bussiness_id          :      6493 
viii. Tip       = 		FORIEGN KEY                               : user_id               :      537 
ix. User        = 		PRIMARY KEY                               :    id                 :      10000 
x. Friend       = 		FORIEGN KEY                               : user_id               :      11
xi. Elite_years =		FORIEGN KEY                               : user_id               :      2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer:   no
	
	
	SQL code used to arrive at answer: 
--METHODE(1)
 						
SELECT  
      --each case checks the column if there is null it 'yes' as there is null, total rows minus total not null rows in a column if equal means no null
 
      CASE WHEN COUNT(*) - COUNT(name)            = 0 then 'No' ELSE 'Yes' END name,
      CASE WHEN COUNT(*) - COUNT(review_count)    = 0 then 'No' ELSE 'Yes' END review_count,
      CASE WHEN COUNT(*) - COUNT(yelping_since)   = 0 then 'No' ELSE 'Yes' END yelping_since,
      CASE WHEN COUNT(*) - COUNT(useful)          = 0 then 'No' ELSE 'Yes' END useful,
      CASE WHEN COUNT(*) - COUNT(funny)           = 0 then 'No' ELSE 'Yes' END funny,
      CASE WHEN COUNT(*) - COUNT(cool)            = 0 then 'No' ELSE 'Yes' END cool,
      CASE WHEN COUNT(*) - COUNT(fans)            = 0 then 'No' ELSE 'Yes' END fans,
      CASE WHEN COUNT(*) - COUNT(average_stars)   = 0 then 'No' ELSE 'Yes' END average_stars,
      CASE WHEN COUNT(*) - COUNT(compliment_hot)  = 0 then 'No' ELSE 'Yes' END compliment_hot,
      CASE WHEN COUNT(*) - COUNT(compliment_more) = 0 then 'No' ELSE 'Yes' END compliment_more,
      CASE WHEN COUNT(*) - COUNT(compliment_profile) = 0 then 'No' ELSE 'Yes' END compliment_profile,
      CASE WHEN COUNT(*) - COUNT(compliment_cute)    = 0 then 'No' ELSE 'Yes' END compliment_cute,
      CASE WHEN COUNT(*) - COUNT(compliment_list)    = 0 then 'No' ELSE 'Yes' END compliment_list,
      CASE WHEN COUNT(*) - COUNT(compliment_note)    = 0 then 'No' ELSE 'Yes' END compliment_note,
      CASE WHEN COUNT(*) - COUNT(compliment_plain)   = 0 then 'No' ELSE 'Yes' END compliment_plain,
      CASE WHEN COUNT(*) - COUNT(compliment_cool)    = 0 then 'No' ELSE 'Yes' END compliment_cool,
      CASE WHEN COUNT(*) - COUNT(compliment_funny)   = 0 then 'No' ELSE 'Yes' END compliment_funny,
      CASE WHEN COUNT(*) - COUNT(compliment_writer)  = 0 then 'No' ELSE 'Yes' END compliment_writer,
      CASE WHEN COUNT(*) - COUNT(compliment_photos)  = 0 then 'No' ELSE 'Yes' END compliment_photos     
FROM    user   

--METHODE(2): 
	   AS IN SQLLITE STORE AND PROCEDURE FUNCTION CANNOT BE CREATED, SO SCALAR FUNCTION BELOW ALSO DO NOT WORK ON SQLLITE, BUT WORKS ON SQL SERVER

--CREATING FUNCTION FOR CHECKING IF ARGUMENT PASSED COLUMN HAS NULL VALUE IN RETURN GIVES ANSWER IN YES OR NO
CREATE FUNCTION check_column_null(@column_name varchar(20))
RETURN  varchar(3)
AS
BEGIN
     DECLARE @RESULT VARCHAR(20)
     SELECT  
          CASE  COUNT(*)-COUNT(@column_name) = 0 THEN SET @RESULT= 'No' ELSE  SET @RESULT= 'Yes' END @column_name
     FROM  user
     RETURN  @RESULT 
END
--CHECKING ONE BY ONE FOR Each column
PRINT DBO.check_column_null(name)
 	 

	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:	1	max:	5	avg:    3.7082 
		
	
	ii. Table: Business, Column: Stars
	
		min:	1.0 	max:	5.0	avg:  3.6549 
		
	
	iii. Table: Tip, Column: Likes
	
		min:	0	max:	 2	avg:	 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:	1	max:	53	avg:	 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min:	0	max:	2000	avg:	24.2995 
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
					--inner query used to retrieve the total reviews of each business_id 
					--outer query retrieve the city names whose reivews are greater then average reviews
					SELECT city as [city with most reviews]
					FROM    business  b INNER JOIN (SELECT  business_id,count(id) most_review from review group by business_id) v
					on     b.id = v.business_id
					group by city
					--values that are greater thAN AVERAGE VALUE ARE MOST VALUE
					having  v.most_review>avg(v.most_review)
					--ORDERING IN DESCENDING ORDER BY CITY NAME
					ORDER BY city DESC
	
	Copy and Paste the Result Below:
				 +------------------------+
				| city with most reviews |
				+------------------------+
				| Toronto   	         |
				| North York 		 |
				| Madison                |
				| Henderson              |
				| Gilbert                |
				| Chandler               |
				| Cave Creek             |
				+------------------------+
	

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:      
				SELECT  stars,review_count as [count]
				FROM    business
				where   city = 'Avon'
				group by stars


Copy and Paste the Resulting Table Below (2 columns – star rating and count):
+-------+--------------+------+
| stars | review_count | city |
+-------+--------------+------+
|   2.5 |            3 | Avon |
|   4.0 |            4 | Avon |
|   5.0 |            3 | Avon |
|   3.5 |            7 | Avon |
|   1.5 |           10 | Avon |
|   3.5 |           31 | Avon |
|   4.5 |           31 | Avon |
|   3.5 |           50 | Avon |
|   2.5 |            3 | Avon |
|   4.0 |           17 | Avon |
+-------+--------------+------+


ii. Beachwood

SQL code used to arrive at answer: SELECT  stars,review_count as [count]
			           FROM    business
			           where   city = 'Beachwood'
				   group by stars
	


Copy and Paste the Resulting Table Below (2 columns – star rating and count):
+-------+-------+
| stars | count |
+-------+-------+
|   3.0 |     8 |
|   3.0 |     3 |
|   4.5 |    14 |
|   5.0 |     6 |
|   4.0 |    69 |
|   4.5 |     3 |
|   5.0 |     4 |
|   2.0 |     8 |
|   3.5 |     3 |
|   3.5 |     3 |
|   5.0 |     6 |
|   2.5 |     3 |
|   5.0 |     3 |
|   5.0 |     4 |
+-------+-------+
		


7. Find the top 3 users based on their total number of reviews:

		
	SQL code used to arrive at answer: SELECT     name,review_count
					   FROM       user
					   order  by   review_count DESC
					   limit      3
		
	Copy and Paste the Result Below:
+--------+--------------+
| name   | review_count |
+--------+--------------+
| Gerald |         2000 |
| Sara   |         1629 |
| Yuri   |         1339 |
+--------+--------------+


		


8. Does posing more reviews correlate with more fans?

 It depends upon the review. If reviews are negative then it does not correlate with more fans. But if reivews are 
positive then it corrleate with more fans.
	

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:    yes, there are 127 out of 140 reviews whose text has word 'love'.  and remaining about hate
        

	
	SQL code used to arrive at answer:
		 Query :   SELECT   b.stars,b.review_count,r.text
			   FROM     review r inner join business b
			   ON       r.business_id = b.id
			   WHERE   r.text like '%love%'
			   OR      r.text like  '%hate%'
		   

	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
					  SELECT     name,fans
					  FROM       user
					  order  by   fans DESC
					  limit      10
	
	
	Copy and Paste the Result Below:
+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+

	
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
   
1st)  to get business names and their star rating in a city in one cell, following query is used :

SELECT   city,GROUP_CONCAT(name, ', ')as [business names], GROUP_CONCAT(stars) AS [star rating]  --GROUP_CONCATE USED TO PRINT ALL BUSINESS NAMES OF CITY IN ONE CELL
FROM     business
WHERE     stars  BETWEEN 2 AND 5
GROUP BY  city
order by city	

2ND)  added one more filteration of just choosing two cities one businesses that is :

SELECT   city,GROUP_CONCAT(name, ', ') as [business names] , GROUP_CONCAT(stars)  AS [star rating]--GROUP_CONCATE USED TO PRINT ALL BUSINESS NAMES OF CITY IN ONE CELL
FROM     business
WHERE    city IN ('Chandler','Rocky River')
AND      name IN  b.name in ('Snip-its Rocky River', 'Nabers Music, Bar & Eats')
GROUP BY  city


RESULT :
+-------------+--------------------------+-------------+
| city        | business names           | star rating |
+-------------+--------------------------+-------------+
| Chandler    | Nabers Music, Bar & Eats | 4.0         |
| Rocky River | Snip-its Rocky River     | 2.5         |
+-------------+--------------------------+-------------+

3rd) comparing both businesses in 'Chandler' WITH 'Rocky River' city.

i. Do the two groups you chose to analyze have a different distribution of hours?

Yes, they have. 

SELECT   b.city,b.name,h.hours
FROM     business b join hours h
ON       b.id = h.business_id
WHERE    b.city IN ('Chandler','Rocky River')
AND      b.name in ('Snip-its Rocky River', 'Nabers Music, Bar & Eats')

+-------------+--------------------------+-----------------------+
| city        | name                     | hours                 |
+-------------+--------------------------+-----------------------+
| Rocky River | Snip-its Rocky River     | Monday|10:00-19:00    |
| Rocky River | Snip-its Rocky River     | Tuesday|10:00-19:00   |
| Rocky River | Snip-its Rocky River     | Friday|10:00-19:00    |
| Rocky River | Snip-its Rocky River     | Wednesday|10:00-19:00 |
| Rocky River | Snip-its Rocky River     | Thursday|10:00-19:00  |
| Rocky River | Snip-its Rocky River     | Sunday|10:00-16:00    |
| Rocky River | Snip-its Rocky River     | Saturday|9:00-17:30   |
| Chandler    | Nabers Music, Bar & Eats | Monday|11:00-0:00     |
| Chandler    | Nabers Music, Bar & Eats | Tuesday|11:00-0:00    |
| Chandler    | Nabers Music, Bar & Eats | Friday|11:00-2:00     |
| Chandler    | Nabers Music, Bar & Eats | Wednesday|11:00-0:00  |
| Chandler    | Nabers Music, Bar & Eats | Thursday|11:00-0:00   |
| Chandler    | Nabers Music, Bar & Eats | Sunday|11:00-0:00     |
| Chandler    | Nabers Music, Bar & Eats | Saturday|11:00-2:00   |
+-------------+--------------------------+-----------------------+


ii. Do the two groups you chose to analyze have a different number of reviews?
yes.
The 'chandler' city only have review in which just two reviews includes 'love' words, and rest 'hat'. Whereas, Rocky River city does not have any review.
the chandler business is one hourse late to rocky river. due to which the star rating of chandler is 4.0, and  rocky river is 2.5

SELECT   b.city,b.name, r.*
FROM     business b join review r
ON       b.id = r.business_id
WHERE    b.city IN ('Chandler','Rocky River')
and        text like '%love%'
         
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

SQL code used for analysis:--1st query)
SELECT   b.city,b.name,h.hours
FROM     business b join hours h
ON       b.id = h.business_id
WHERE    b.city IN ('Chandler','Rocky River')
AND      b.name in ('Snip-its Rocky River', 'Nabers Music, Bar & Eats')

--2nd query) SELECT   b.city,b.name, r.*
FROM     business b join review r
ON       b.id = r.business_id
WHERE    b.city IN ('Chandler','Rocky River')





		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:  Total number of reviews reviews given to the businesses that are open and close         
         
ii. Difference 2:  Total number of stars recieved by  business that are open and close
OUPUT: 
+------------------+------------------+---------------+-------------+
| total_businesses | is_business_open | Total_reviews | Total_stars |
+------------------+------------------+---------------+-------------+
|             1520 | No               |         35261 |      5351.0 |
|             8480 | Yes              |        269300 |     31198.0 |
+------------------+------------------+---------------+-------------+
         
                
SQL code used for analysis:
Query : 
SELECT   total_businesses,
        (case when is_open =1 then 'Yes' else 'No' end) as is_business_open,
        Total_reviews,
        Total_stars       
FROM  ( SELECT  is_open,sum(review_count) total_reviews,
        SUM(stars) as Total_stars, 
        count(*) as total_businesses
        FROM    business
        GROUP BY is_open) 

	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
objectives: 
1st) predicting businesses location, and business category effect on star rating as well as reviews.
2nd)now, checking if star rating is more than average star  then checking review is also positive of that businesses.
3rd)checking the review provided  from which user? does that user have fans greater than average fan,and having greater than average overview_count?
4th) checking business categary and tip given by user.is that user has more fans and review count .



         
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:

      for 1st objective) data set  of business category, city,state compare to star rating and review data to predict next business average rating and review in same location, and category 
      for 2nd objective) business star rating, and review data of that business,attribute table for business name.
      for 3rd objective) user data, review data
      for 4th objective) data set of business category and tip as well as user fans, and review_count data
                   
                  
iii. Output of your finished dataset:

 1st) objective ouput:
+-------+----------+-------------------------------+-------------+--------------+---------------+-----------------+
| STATE | CITY     | business category             | Total_stars | Total_reveiw | average_Stars | Average_reviews |
+-------+----------+-------------------------------+-------------+--------------+---------------+-----------------+
| AZ    | Avondale | Health & Medical              |         3.0 |           30 |           3.0 |            30.0 |
| AZ    | Avondale | Optometrists                  |         3.0 |           30 |           3.0 |            30.0 |
| AZ    | Chandler | Accessories                   |         4.0 |            3 |           4.0 |             3.0 |
| AZ    | Chandler | Auto Repair                   |         9.5 |           96 |          4.75 |            48.0 |
| AZ    | Chandler | Automotive                    |         9.5 |           96 |          4.75 |            48.0 |
| AZ    | Chandler | Bakeries                      |         5.0 |            5 |           5.0 |             5.0 |
| AZ    | Chandler | Bars                          |         7.0 |          216 |           3.5 |           108.0 |
| AZ    | Chandler | Child Care & Day Care         |         5.0 |            5 |           5.0 |             5.0 |
| AZ    | Chandler | Contractors                   |         5.0 |            7 |           5.0 |             7.0 |
| AZ    | Chandler | Department Stores             |         5.0 |            4 |           5.0 |             4.0 |
| AZ    | Chandler | Desserts                      |         5.0 |            5 |           5.0 |             5.0 |
| AZ    | Chandler | Discount Store                |         5.0 |            4 |           5.0 |             4.0 |
| AZ    | Chandler | Door Sales/Installation       |         5.0 |            7 |           5.0 |             7.0 |
| AZ    | Chandler | Education                     |         5.0 |            5 |           5.0 |             5.0 |
| AZ    | Chandler | Elementary Schools            |         5.0 |            5 |           5.0 |             5.0 |
| AZ    | Chandler | Event Planning & Services     |         5.0 |            4 |           5.0 |             4.0 |
| AZ    | Chandler | Fashion                       |         9.0 |            7 |           4.5 |             3.5 |
| AZ    | Chandler | Food                          |         5.0 |            5 |           5.0 |             5.0 |
| AZ    | Chandler | Garage Door Services          |         5.0 |            7 |           5.0 |             7.0 |
| AZ    | Chandler | Home & Garden                 |         9.0 |           12 |           4.5 |             6.0 |
| AZ    | Chandler | Home Decor                    |         4.0 |            5 |           4.0 |             5.0 |
| AZ    | Chandler | Home Services                 |         9.0 |           12 |           4.5 |             6.0 |
| AZ    | Chandler | Irish                         |         3.0 |          141 |           3.0 |           141.0 |
| AZ    | Chandler | Local Services                |         9.0 |           10 |           4.5 |             5.0 |
| AZ    | Chandler | Middle Schools & High Schools |         5.0 |            5 |           5.0 |             5.0 |
+-------+----------+-------------------------------+-------------+--------------+---------------+-----------------+
(Output limit exceeded, 25 of 586 total rows shown)
        

2nd) objective output : 
+------------------------+-------------+
| business_id            | Total_stars |
+------------------------+-------------+
| 1ZnVfS-qP19upP_fwOhZsA |         4.0 |
| 1ZnVfS-qP19upP_fwOhZsA |         4.0 |
| 1ZnVfS-qP19upP_fwOhZsA |         4.0 |
| 1ZnVfS-qP19upP_fwOhZsA |         4.0 |
| 1ZnVfS-qP19upP_fwOhZsA |         4.0 |
| 1ZnVfS-qP19upP_fwOhZsA |         4.0 |
| 1ZnVfS-qP19upP_fwOhZsA |         4.0 |
| -Eu04UHRqmGGyvYRDY8-tg |         4.5 |
| -Eu04UHRqmGGyvYRDY8-tg |         4.5 |
| -Eu04UHRqmGGyvYRDY8-tg |         4.5 |
| -Eu04UHRqmGGyvYRDY8-tg |         4.5 |
| -Eu04UHRqmGGyvYRDY8-tg |         4.5 |
| -Eu04UHRqmGGyvYRDY8-tg |         4.5 |
| -Eu04UHRqmGGyvYRDY8-tg |         4.5 |
| -Eu04UHRqmGGyvYRDY8-tg |         4.5 |
| -Eu04UHRqmGGyvYRDY8-tg |         4.5 |
| -Eu04UHRqmGGyvYRDY8-tg |         4.5 |
| -Za5mjo-CYYUMsd1r8GC7Q |         3.5 |
| -Za5mjo-CYYUMsd1r8GC7Q |         3.5 |
| -Za5mjo-CYYUMsd1r8GC7Q |         3.5 |
+------------------------+-------------+


3rd) objective output:
+-----------+------------------------+------+--------------+-------------------------+-----------------------+
| User_name | id                     | fans | review_count | IS_REVIEW_ABOVE_AVERAGE | IS_FANS_ABOVE_AVERAGE |
+-----------+------------------------+------+--------------+-------------------------+-----------------------+
| soragamii | -0oUqPRPpbi2MyiK39cCTg |    1 |           26 | No                      | NO                    |
| W         | -BevLRnJhh9JeIT2g5I3mQ |    4 |          198 | No                      | NO                    |
| Tonia     | -0DgO-WJ7yBjAihY_PoUpw |    0 |            1 | No                      | NO                    |
| Susan     | -I667x7jrf9u5QiEb7iCqQ |    0 |           16 | No                      | NO                    |
| Still     | -gi3QTLxpER5LqqPXYEsMw |    0 |           27 | No                      | NO                    |
| Sing      | -ljK_haRwcJSgqhMcqoQyg |    3 |          167 | No                      | NO                    |
| Shelly    | -EdQTVyh9dgjp0N-gFWWDA |    0 |            9 | No                      | NO                    |
| Shari     | -bhXzKth2lHYYUYvv_4aMw |    0 |            1 | No                      | NO                    |
| Shannon   | -K_6MMe029REUKUrUGtCxQ |    1 |           43 | No                      | NO                    |
| Sanaz     | -8nmj3B-tfY_vFiimtBOsw |    3 |           71 | No                      | NO                    |
| Ryan      | -7rFFU0fNQm4w0zn-r_9Xg |    1 |            7 | No                      | NO                    |
| Royi      | -Lcp9BDlDDo7j3aIGJWjYg |    0 |           43 | No                      | NO                    |
| Robert    | -kaIBHIW0xZhLavT0_cVRQ |    0 |           25 | No                      | NO                    |
| Rachel    | -7ABF3eAKE98kiufwQ2dng |    0 |           31 | No                      | NO                    |
| Pinky     | -k5yFUChotBMGQgHdFZvLQ |   32 |          449 | No                      | NO                    |
| Payden    | -lH7y5tOBoAWvF4vjDznqg |    1 |           19 | No                      | NO                    |
| Patricia  | -4ARERfWgDsMfy1Pu7AbLA |    3 |           46 | No                      | NO                    |
| P         | -iokf7gI-XJAfZyUJKLbtQ |    0 |            4 | No                      | NO                    |
| Nina      | -gtZ4okpMWCBzuIsaYNumA |    3 |            8 | No                      | NO                    |
| Nikky     | -BJAX2vP87uzbAQkrkDPDA |    0 |           10 | No                      | NO                    |
| Nikki     | -dGucyqcs_V14HQjg20LtQ |    1 |           13 | No                      | NO                    |
| Nieves    | -C-l8EHSLXtZZVfUAUhsPA |   80 |          178 | No                      | NO                    |
| Nancy     | -EJ5aLt72W5JYKjqn7fI1Q |    0 |            1 | No                      | NO                    |
| Meg       | -8EE28ZzxVFxwjRqJuDumg |    0 |            2 | No                      | NO                    |
| Marlene   | -H7TR-AfFK5sNzoWNRqhdQ |    3 |           27 | No                      | NO                    |
+-----------+------------------------+------+--------------+-------------------------+-----------------------+
(Output limit exceeded, 25 of 72 total rows shown)


4th) objective ouptut:
+-------------+---------------+------------+---------+-----------+----------+
| Business_id | business_name | a.category | User_id | User_name | User_tip |
+-------------+---------------+------------+---------+-----------+----------+
+-------------+---------------+------------+---------+-----------+----------+
(Zero rows)
         

-------------------------------------------------------------------------------------------------------------------------------------------------------
								-----------------------------------------------

iv. Provide the SQL code you used to create your final dataset:

1st)  objective QUERY : 

SELECT   b.state AS STATE,b.city AS CITY,c.category as 'business category',
         sum(b.stars) Total_stars,sum(b.review_count) Total_reveiw,
          round(avg(b.stars),2) as average_Stars,round(avg(b.review_count),2) as Average_reviews
FROM      business  b inner join category c
ON        b.id = c.business_id
GROUP BY  state,city,c.category
  -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2nd) object Query: 

-- businesses with sum of stars greateer then average stars based on location and category,which have positive review
select   a.business_id , a.Total_stars
from     review as r 
inner join ( --business with sum of stars based on locationa and category greater then average stars
            SELECT   b.state AS STATE,b.city AS CITY,b.id as business_id,c.category as business_category, 
                     sum(b.stars) AS Total_stars,
                     sum(b.review_count)   as Total_review
            FROM      business  b inner join category c
            ON        b.id = c.business_id
            GROUP BY  state,city,b.id,c.category
            HAVING   sum(b.stars)>=avg(b.stars)
            AND     sum(b.review_count)>=avg(b.review_count)) As a
On  r.business_id = a.business_id
where   r.text like '%love'
or      (r.useful>=1 and r.funny>=1 and r.cool>=1)

---------------------------------------------------------------------------------------------------------------------------------------------------------------
3rd) objective Query:

--2ND) WHICH USER HAS GIVEN REVIEW
SELECT    a.*
FROM   review r 
INNER JOIN (
            --1st) does user has fans greater than average fans, and user review_count greater than average review_count
            SELECT name as User_name, id ,fans, review_count,
                    ( CASE 
                     WHEN   review_count>review_count > (SELECT AVG(review_count) FROM    user) THEN 'Yes' ELSE 'No' END ) AS IS_REVIEW_ABOVE_AVERAGE,
                    ( CASE  
                    WHEN   fans>  fans > (SELECT AVG(fans) FROM  user) THEN 'yes' ELSE 'NO' END) AS IS_FANS_ABOVE_AVERAGE
                    FROM   user
                    ) as a
ON a.id = r.user_id
ORDER BY a.User_name desc

------------------------------------------------------------------------------------------------------------------------------------------------------------------

4th) objective Query :

SELECT  a.id  as Business_id,a.name as business_name,a.category,b.id as User_id,b.name as User_name,b.text as User_tip
    --1st) finding category of business
FROM    (SELECT  bus.id,bus.name,c.category
        FROM    (SELECT bs.id,at.name
            FROM  business bs
            INNER JOIN attribute at
            ON     at.business_id = bs.id) AS bus
        INNER JOIN  category c
        ON      bus.id = c.business_id) AS a
inner JOIN
    --2nd) finding user given tip having fans more fans,and review
    (SELECT  t.business_id,t.text,u.id , u.name 
    FROM   user u INNER JOIN tip t
    ON    u.id = t.user_id
    where u.fans>(SELECT avg(fans) FROM user)
    AND   u.review_count >(SELECT avg(review_count) FROM user))AS b
ON  a.id = b.business_id

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
